-- Load the Kavo UI Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local TweenService = game:GetService("TweenService")
local Window = Library.CreateLib("GIJA HUB", "DarkTheme")

-- Create a new tab and section
local Tab = Window:NewTab("Main")
local Section = Tab:NewSection("Main")

-- Function to trigger the win scenario
function win()
    local player = game.Players.LocalPlayer
    local character = player.Character

    if not character then
        return
    end

    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

    if not humanoidRootPart then
        return
    end

    local Num = player:WaitForChild("leaderstats").Stage.Value
    local CheckpointsFolder = workspace:WaitForChild("Checkpoints")
    
    for i = 1, 221 do
        local checkpoint = CheckpointsFolder:FindFirstChild(tostring(Num + i))
        if not checkpoint then
            local args = {
                [1] = "rebirth"
            }
            game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
            return -- No need to continue if "rebirth" is triggered
        end
        
        local endCFrame = checkpoint.CFrame

        local tweenInfo = TweenInfo.new(0, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
        local tween = TweenService:Create(humanoidRootPart, tweenInfo, {
            CFrame = endCFrame
        })

        tween:Play()
        tween.Completed:Wait() -- Wait for the tween to complete
        wait(0)
    end
end

-- Create a button that triggers a win scenario
Section:NewButton("Win", "Trigger a win scenario", function()
    win() -- Call the win function to trigger the scenario
end)

-- Rest of the code (Toggle loop functionality)
local looping = false
local toggleLoop

local function performWinScenario()
    win() -- Call the win function to trigger the scenario
end

local toggleLoopButton = Section:NewToggle("Toggle Loop", "Toggle the win scenario loop", function(state)
    looping = state

    if looping then
        toggleLoop = game:GetService("RunService").Heartbeat:Connect(function()
            performWinScenario()
        end)
    else
        if toggleLoop then
            toggleLoop:Disconnect()
        end
    end
end)
